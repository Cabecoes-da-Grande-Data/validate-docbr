{
    "docs": [
        {
            "location": "/",
            "text": "validate-docbr\n\n\n\n  \n\n\n\n\nPacote Python para valida\u00e7\u00e3o de documentos brasileiros.\n\n\nInstala\u00e7\u00e3o do validate-docbr\n\n\nPara instalar o pacote:\n\n\npip install validate-docbr",
            "title": "Home"
        },
        {
            "location": "/#validate-docbr",
            "text": "Pacote Python para valida\u00e7\u00e3o de documentos brasileiros.",
            "title": "validate-docbr"
        },
        {
            "location": "/#instalacao-do-validate-docbr",
            "text": "Para instalar o pacote:  pip install validate-docbr",
            "title": "Instala\u00e7\u00e3o do validate-docbr"
        },
        {
            "location": "/guia-de-uso/",
            "text": "M\u00e9todos\n\n\nTodos os documentos possuem os mesmos m\u00e9todos e funcionam da mesma forma.\n\n\n\n\nvalidate\n\n\nValida o documento passado como argumento. Retorna um \nbool\n, \nTrue\n caso seja v\u00e1lido, \nFalse\n caso contr\u00e1rio . Recebe os par\u00e2metros:\n\n\n\n\n\n\n\n\nPar\u00e2metro\n\n\nTipo\n\n\nValor padr\u00e3o\n\n\nObrigat\u00f3rio\n\n\nDescri\u00e7\u00e3o\n\n\n\n\n\n\n\n\n\n\ndoc\n\n\nstr\n\n\n''\n\n\nX\n\n\nO documento que se quer validar.\n\n\n\n\n\n\n\n\nfrom validate_docbr import CPF\n\ncpf = CPF()\n\n# Validar CPF\ncpf.validate(\"012.345.678-90\")  # True\ncpf.validate(\"012.345.678-91\")  # False\n\n\n\n\n\n\ngenerate\n\n\nGera um novo documento, retorna em formato de \nstr\n. Recebe os par\u00e2metros:\n\n\n\n\n\n\n\n\nPar\u00e2metro\n\n\nTipo\n\n\nValor padr\u00e3o\n\n\nObrigat\u00f3rio\n\n\nDescri\u00e7\u00e3o\n\n\n\n\n\n\n\n\n\n\nmask\n\n\nbool\n\n\nFalse\n\n\n-\n\n\nQuando possui o valor \nTrue\n, o documento retornado estar\u00e1 formatado.\n\n\n\n\n\n\n\n\nfrom validate_docbr import CPF\n\ncpf = CPF()\n\n# Gerar novo CPF\nnew_cpf_one = cpf.generate()  # \"01234567890\"\nnew_cpf_two = cpf.generate(True)  # \"012.345.678-90\"\n\n\n\n\n\n\ngenerate_list\n\n\nGera uma lista de documentos, retorna em formato de \nlist\n com elementos do tipo \nstr\n. Recebe os par\u00e2metros:\n\n\n\n\n\n\n\n\nPar\u00e2metro\n\n\nTipo\n\n\nValor padr\u00e3o\n\n\nObrigat\u00f3rio\n\n\nDescri\u00e7\u00e3o\n\n\n\n\n\n\n\n\n\n\nn\n\n\nint\n\n\n1\n\n\nX\n\n\nA quantidade desejada de documentos que ser\u00e3o gerados.\n\n\n\n\n\n\nmask\n\n\nbool\n\n\nFalse\n\n\n-\n\n\nSe os documentos gerados dever\u00e3o ter ou n\u00e3o m\u00e1scara.\n\n\n\n\n\n\nrepeat\n\n\nbool\n\n\nFalse\n\n\n-\n\n\nSe aceita ou n\u00e3o documentos repetidos.\n\n\n\n\n\n\n\n\nfrom validate_docbr import CPF\n\ncpf = CPF()\n\n# Gerar lista de CPFs\ncpfs_one = cpf.generate_list(2)  # [ \"85215667438\", \"28293145811\" ]\ncpfs_two = cpf.generate_list(2, True)  # [ \"852.156.674-38\", \"282.931.458-11\" ]\n\n\n\n\n\n\nmask\n\n\nMascara o documento passado como argumento. Retorna um \nstr\n que \u00e9 o documento mascarado . Recebe os par\u00e2metros:\n\n\n\n\n\n\n\n\nPar\u00e2metro\n\n\nTipo\n\n\nValor padr\u00e3o\n\n\nObrigat\u00f3rio\n\n\nDescri\u00e7\u00e3o\n\n\n\n\n\n\n\n\n\n\ndoc\n\n\nstr\n\n\n''\n\n\nX\n\n\nO documento que se quer mascarar.\n\n\n\n\n\n\n\n\nfrom validate_docbr import CPF\n\ncpf = CPF()\n\ncpf_me = \"01234567890\"\n\n# Mascara o CPF\ncpf.mask(cpf_me)  # \"012.345.678-90\"",
            "title": "Guia de uso"
        },
        {
            "location": "/guia-de-uso/#metodos",
            "text": "Todos os documentos possuem os mesmos m\u00e9todos e funcionam da mesma forma.",
            "title": "M\u00e9todos"
        },
        {
            "location": "/guia-de-uso/#validate",
            "text": "Valida o documento passado como argumento. Retorna um  bool ,  True  caso seja v\u00e1lido,  False  caso contr\u00e1rio . Recebe os par\u00e2metros:     Par\u00e2metro  Tipo  Valor padr\u00e3o  Obrigat\u00f3rio  Descri\u00e7\u00e3o      doc  str  ''  X  O documento que se quer validar.     from validate_docbr import CPF\n\ncpf = CPF()\n\n# Validar CPF\ncpf.validate(\"012.345.678-90\")  # True\ncpf.validate(\"012.345.678-91\")  # False",
            "title": "validate"
        },
        {
            "location": "/guia-de-uso/#generate",
            "text": "Gera um novo documento, retorna em formato de  str . Recebe os par\u00e2metros:     Par\u00e2metro  Tipo  Valor padr\u00e3o  Obrigat\u00f3rio  Descri\u00e7\u00e3o      mask  bool  False  -  Quando possui o valor  True , o documento retornado estar\u00e1 formatado.     from validate_docbr import CPF\n\ncpf = CPF()\n\n# Gerar novo CPF\nnew_cpf_one = cpf.generate()  # \"01234567890\"\nnew_cpf_two = cpf.generate(True)  # \"012.345.678-90\"",
            "title": "generate"
        },
        {
            "location": "/guia-de-uso/#generate_list",
            "text": "Gera uma lista de documentos, retorna em formato de  list  com elementos do tipo  str . Recebe os par\u00e2metros:     Par\u00e2metro  Tipo  Valor padr\u00e3o  Obrigat\u00f3rio  Descri\u00e7\u00e3o      n  int  1  X  A quantidade desejada de documentos que ser\u00e3o gerados.    mask  bool  False  -  Se os documentos gerados dever\u00e3o ter ou n\u00e3o m\u00e1scara.    repeat  bool  False  -  Se aceita ou n\u00e3o documentos repetidos.     from validate_docbr import CPF\n\ncpf = CPF()\n\n# Gerar lista de CPFs\ncpfs_one = cpf.generate_list(2)  # [ \"85215667438\", \"28293145811\" ]\ncpfs_two = cpf.generate_list(2, True)  # [ \"852.156.674-38\", \"282.931.458-11\" ]",
            "title": "generate_list"
        },
        {
            "location": "/guia-de-uso/#mask",
            "text": "Mascara o documento passado como argumento. Retorna um  str  que \u00e9 o documento mascarado . Recebe os par\u00e2metros:     Par\u00e2metro  Tipo  Valor padr\u00e3o  Obrigat\u00f3rio  Descri\u00e7\u00e3o      doc  str  ''  X  O documento que se quer mascarar.     from validate_docbr import CPF\n\ncpf = CPF()\n\ncpf_me = \"01234567890\"\n\n# Mascara o CPF\ncpf.mask(cpf_me)  # \"012.345.678-90\"",
            "title": "mask"
        },
        {
            "location": "/licenca/",
            "text": "MIT License\n\n\nCopyright (c) 2018 The Python Packaging Authority\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
            "title": "Licenca"
        },
        {
            "location": "/licenca/#mit-license",
            "text": "Copyright (c) 2018 The Python Packaging Authority  Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
            "title": "MIT License"
        },
        {
            "location": "/sobre/",
            "text": "Pacote Python para valida\u00e7\u00e3o de documentos brasileiros.\n\n\nDocumentos\n\n\nDocumentos que est\u00e3o no pacote:\n\n\n\n\nCPF: Cadastro de Pessoas F\u00edsicas;\n\n\nCNPJ: Cadastro Nacional da Pessoa Jur\u00eddica;\n\n\nCNS: Cart\u00e3o Nacional de Sa\u00fade.",
            "title": "Sobre"
        },
        {
            "location": "/sobre/#documentos",
            "text": "Documentos que est\u00e3o no pacote:   CPF: Cadastro de Pessoas F\u00edsicas;  CNPJ: Cadastro Nacional da Pessoa Jur\u00eddica;  CNS: Cart\u00e3o Nacional de Sa\u00fade.",
            "title": "Documentos"
        }
    ]
}